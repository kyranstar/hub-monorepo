// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hubble/v1/rpc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HubService_SubmitMessage_FullMethodName                   = "/hubble.v1.HubService/SubmitMessage"
	HubService_Subscribe_FullMethodName                       = "/hubble.v1.HubService/Subscribe"
	HubService_GetEvent_FullMethodName                        = "/hubble.v1.HubService/GetEvent"
	HubService_GetCast_FullMethodName                         = "/hubble.v1.HubService/GetCast"
	HubService_GetCastsByFid_FullMethodName                   = "/hubble.v1.HubService/GetCastsByFid"
	HubService_GetCastsByParent_FullMethodName                = "/hubble.v1.HubService/GetCastsByParent"
	HubService_GetCastsByMention_FullMethodName               = "/hubble.v1.HubService/GetCastsByMention"
	HubService_GetReaction_FullMethodName                     = "/hubble.v1.HubService/GetReaction"
	HubService_GetReactionsByFid_FullMethodName               = "/hubble.v1.HubService/GetReactionsByFid"
	HubService_GetReactionsByCast_FullMethodName              = "/hubble.v1.HubService/GetReactionsByCast"
	HubService_GetReactionsByTarget_FullMethodName            = "/hubble.v1.HubService/GetReactionsByTarget"
	HubService_GetUserData_FullMethodName                     = "/hubble.v1.HubService/GetUserData"
	HubService_GetUserDataByFid_FullMethodName                = "/hubble.v1.HubService/GetUserDataByFid"
	HubService_GetNameRegistryEvent_FullMethodName            = "/hubble.v1.HubService/GetNameRegistryEvent"
	HubService_GetVerification_FullMethodName                 = "/hubble.v1.HubService/GetVerification"
	HubService_GetVerificationsByFid_FullMethodName           = "/hubble.v1.HubService/GetVerificationsByFid"
	HubService_GetSigner_FullMethodName                       = "/hubble.v1.HubService/GetSigner"
	HubService_GetSignersByFid_FullMethodName                 = "/hubble.v1.HubService/GetSignersByFid"
	HubService_GetIdRegistryEvent_FullMethodName              = "/hubble.v1.HubService/GetIdRegistryEvent"
	HubService_GetIdRegistryEventByAddress_FullMethodName     = "/hubble.v1.HubService/GetIdRegistryEventByAddress"
	HubService_GetFids_FullMethodName                         = "/hubble.v1.HubService/GetFids"
	HubService_GetLink_FullMethodName                         = "/hubble.v1.HubService/GetLink"
	HubService_GetLinksByFid_FullMethodName                   = "/hubble.v1.HubService/GetLinksByFid"
	HubService_GetLinksByTarget_FullMethodName                = "/hubble.v1.HubService/GetLinksByTarget"
	HubService_GetAllCastMessagesByFid_FullMethodName         = "/hubble.v1.HubService/GetAllCastMessagesByFid"
	HubService_GetAllReactionMessagesByFid_FullMethodName     = "/hubble.v1.HubService/GetAllReactionMessagesByFid"
	HubService_GetAllVerificationMessagesByFid_FullMethodName = "/hubble.v1.HubService/GetAllVerificationMessagesByFid"
	HubService_GetAllSignerMessagesByFid_FullMethodName       = "/hubble.v1.HubService/GetAllSignerMessagesByFid"
	HubService_GetAllUserDataMessagesByFid_FullMethodName     = "/hubble.v1.HubService/GetAllUserDataMessagesByFid"
	HubService_GetAllLinkMessagesByFid_FullMethodName         = "/hubble.v1.HubService/GetAllLinkMessagesByFid"
	HubService_GetInfo_FullMethodName                         = "/hubble.v1.HubService/GetInfo"
	HubService_GetSyncStatus_FullMethodName                   = "/hubble.v1.HubService/GetSyncStatus"
	HubService_GetAllSyncIdsByPrefix_FullMethodName           = "/hubble.v1.HubService/GetAllSyncIdsByPrefix"
	HubService_GetAllMessagesBySyncIds_FullMethodName         = "/hubble.v1.HubService/GetAllMessagesBySyncIds"
	HubService_GetSyncMetadataByPrefix_FullMethodName         = "/hubble.v1.HubService/GetSyncMetadataByPrefix"
	HubService_GetSyncSnapshotByPrefix_FullMethodName         = "/hubble.v1.HubService/GetSyncSnapshotByPrefix"
)

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubServiceClient interface {
	// Submit Methods
	SubmitMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Event Methods
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (HubService_SubscribeClient, error)
	GetEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*HubEvent, error)
	// Casts
	GetCast(ctx context.Context, in *CastId, opts ...grpc.CallOption) (*Message, error)
	GetCastsByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetCastsByParent(ctx context.Context, in *CastsByParentRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetCastsByMention(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	// Reactions
	GetReaction(ctx context.Context, in *ReactionRequest, opts ...grpc.CallOption) (*Message, error)
	GetReactionsByFid(ctx context.Context, in *ReactionsByFidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetReactionsByCast(ctx context.Context, in *ReactionsByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetReactionsByTarget(ctx context.Context, in *ReactionsByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	// User Data
	GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*Message, error)
	GetUserDataByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetNameRegistryEvent(ctx context.Context, in *NameRegistryEventRequest, opts ...grpc.CallOption) (*NameRegistryEvent, error)
	// Verifications
	GetVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*Message, error)
	GetVerificationsByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	// Signer
	GetSigner(ctx context.Context, in *SignerRequest, opts ...grpc.CallOption) (*Message, error)
	GetSignersByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetIdRegistryEvent(ctx context.Context, in *IdRegistryEventRequest, opts ...grpc.CallOption) (*IdRegistryEvent, error)
	GetIdRegistryEventByAddress(ctx context.Context, in *IdRegistryEventByAddressRequest, opts ...grpc.CallOption) (*IdRegistryEvent, error)
	GetFids(ctx context.Context, in *FidsRequest, opts ...grpc.CallOption) (*FidsResponse, error)
	// Links
	GetLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*Message, error)
	GetLinksByFid(ctx context.Context, in *LinksByFidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetLinksByTarget(ctx context.Context, in *LinksByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	// Bulk Methods
	GetAllCastMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetAllReactionMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetAllVerificationMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetAllSignerMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetAllUserDataMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetAllLinkMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	// Sync Methods
	GetInfo(ctx context.Context, in *HubInfoRequest, opts ...grpc.CallOption) (*HubInfoResponse, error)
	GetSyncStatus(ctx context.Context, in *SyncStatusRequest, opts ...grpc.CallOption) (*SyncStatusResponse, error)
	GetAllSyncIdsByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*SyncIds, error)
	GetAllMessagesBySyncIds(ctx context.Context, in *SyncIds, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetSyncMetadataByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*TrieNodeMetadataResponse, error)
	GetSyncSnapshotByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*TrieNodeSnapshotResponse, error)
}

type hubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubServiceClient(cc grpc.ClientConnInterface) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) SubmitMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_SubmitMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (HubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &HubService_ServiceDesc.Streams[0], HubService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hubServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HubService_SubscribeClient interface {
	Recv() (*HubEvent, error)
	grpc.ClientStream
}

type hubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *hubServiceSubscribeClient) Recv() (*HubEvent, error) {
	m := new(HubEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubServiceClient) GetEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*HubEvent, error) {
	out := new(HubEvent)
	err := c.cc.Invoke(ctx, HubService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetCast(ctx context.Context, in *CastId, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetCast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetCastsByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetCastsByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetCastsByParent(ctx context.Context, in *CastsByParentRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetCastsByParent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetCastsByMention(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetCastsByMention_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetReaction(ctx context.Context, in *ReactionRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetReactionsByFid(ctx context.Context, in *ReactionsByFidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetReactionsByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetReactionsByCast(ctx context.Context, in *ReactionsByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetReactionsByCast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetReactionsByTarget(ctx context.Context, in *ReactionsByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetReactionsByTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetUserDataByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetUserDataByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetNameRegistryEvent(ctx context.Context, in *NameRegistryEventRequest, opts ...grpc.CallOption) (*NameRegistryEvent, error) {
	out := new(NameRegistryEvent)
	err := c.cc.Invoke(ctx, HubService_GetNameRegistryEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetVerificationsByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetVerificationsByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSigner(ctx context.Context, in *SignerRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetSigner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSignersByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetSignersByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetIdRegistryEvent(ctx context.Context, in *IdRegistryEventRequest, opts ...grpc.CallOption) (*IdRegistryEvent, error) {
	out := new(IdRegistryEvent)
	err := c.cc.Invoke(ctx, HubService_GetIdRegistryEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetIdRegistryEventByAddress(ctx context.Context, in *IdRegistryEventByAddressRequest, opts ...grpc.CallOption) (*IdRegistryEvent, error) {
	out := new(IdRegistryEvent)
	err := c.cc.Invoke(ctx, HubService_GetIdRegistryEventByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetFids(ctx context.Context, in *FidsRequest, opts ...grpc.CallOption) (*FidsResponse, error) {
	out := new(FidsResponse)
	err := c.cc.Invoke(ctx, HubService_GetFids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, HubService_GetLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetLinksByFid(ctx context.Context, in *LinksByFidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetLinksByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetLinksByTarget(ctx context.Context, in *LinksByTargetRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetLinksByTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllCastMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllCastMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllReactionMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllReactionMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllVerificationMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllVerificationMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllSignerMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllSignerMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllUserDataMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllUserDataMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllLinkMessagesByFid(ctx context.Context, in *FidRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllLinkMessagesByFid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetInfo(ctx context.Context, in *HubInfoRequest, opts ...grpc.CallOption) (*HubInfoResponse, error) {
	out := new(HubInfoResponse)
	err := c.cc.Invoke(ctx, HubService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSyncStatus(ctx context.Context, in *SyncStatusRequest, opts ...grpc.CallOption) (*SyncStatusResponse, error) {
	out := new(SyncStatusResponse)
	err := c.cc.Invoke(ctx, HubService_GetSyncStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllSyncIdsByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*SyncIds, error) {
	out := new(SyncIds)
	err := c.cc.Invoke(ctx, HubService_GetAllSyncIdsByPrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetAllMessagesBySyncIds(ctx context.Context, in *SyncIds, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, HubService_GetAllMessagesBySyncIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSyncMetadataByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*TrieNodeMetadataResponse, error) {
	out := new(TrieNodeMetadataResponse)
	err := c.cc.Invoke(ctx, HubService_GetSyncMetadataByPrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) GetSyncSnapshotByPrefix(ctx context.Context, in *TrieNodePrefix, opts ...grpc.CallOption) (*TrieNodeSnapshotResponse, error) {
	out := new(TrieNodeSnapshotResponse)
	err := c.cc.Invoke(ctx, HubService_GetSyncSnapshotByPrefix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServiceServer is the server API for HubService service.
// All implementations should embed UnimplementedHubServiceServer
// for forward compatibility
type HubServiceServer interface {
	// Submit Methods
	SubmitMessage(context.Context, *Message) (*Message, error)
	// Event Methods
	Subscribe(*SubscribeRequest, HubService_SubscribeServer) error
	GetEvent(context.Context, *EventRequest) (*HubEvent, error)
	// Casts
	GetCast(context.Context, *CastId) (*Message, error)
	GetCastsByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetCastsByParent(context.Context, *CastsByParentRequest) (*MessagesResponse, error)
	GetCastsByMention(context.Context, *FidRequest) (*MessagesResponse, error)
	// Reactions
	GetReaction(context.Context, *ReactionRequest) (*Message, error)
	GetReactionsByFid(context.Context, *ReactionsByFidRequest) (*MessagesResponse, error)
	GetReactionsByCast(context.Context, *ReactionsByTargetRequest) (*MessagesResponse, error)
	GetReactionsByTarget(context.Context, *ReactionsByTargetRequest) (*MessagesResponse, error)
	// User Data
	GetUserData(context.Context, *UserDataRequest) (*Message, error)
	GetUserDataByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetNameRegistryEvent(context.Context, *NameRegistryEventRequest) (*NameRegistryEvent, error)
	// Verifications
	GetVerification(context.Context, *VerificationRequest) (*Message, error)
	GetVerificationsByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	// Signer
	GetSigner(context.Context, *SignerRequest) (*Message, error)
	GetSignersByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetIdRegistryEvent(context.Context, *IdRegistryEventRequest) (*IdRegistryEvent, error)
	GetIdRegistryEventByAddress(context.Context, *IdRegistryEventByAddressRequest) (*IdRegistryEvent, error)
	GetFids(context.Context, *FidsRequest) (*FidsResponse, error)
	// Links
	GetLink(context.Context, *LinkRequest) (*Message, error)
	GetLinksByFid(context.Context, *LinksByFidRequest) (*MessagesResponse, error)
	GetLinksByTarget(context.Context, *LinksByTargetRequest) (*MessagesResponse, error)
	// Bulk Methods
	GetAllCastMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetAllReactionMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetAllVerificationMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetAllSignerMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetAllUserDataMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	GetAllLinkMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error)
	// Sync Methods
	GetInfo(context.Context, *HubInfoRequest) (*HubInfoResponse, error)
	GetSyncStatus(context.Context, *SyncStatusRequest) (*SyncStatusResponse, error)
	GetAllSyncIdsByPrefix(context.Context, *TrieNodePrefix) (*SyncIds, error)
	GetAllMessagesBySyncIds(context.Context, *SyncIds) (*MessagesResponse, error)
	GetSyncMetadataByPrefix(context.Context, *TrieNodePrefix) (*TrieNodeMetadataResponse, error)
	GetSyncSnapshotByPrefix(context.Context, *TrieNodePrefix) (*TrieNodeSnapshotResponse, error)
}

// UnimplementedHubServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (UnimplementedHubServiceServer) SubmitMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMessage not implemented")
}
func (UnimplementedHubServiceServer) Subscribe(*SubscribeRequest, HubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedHubServiceServer) GetEvent(context.Context, *EventRequest) (*HubEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedHubServiceServer) GetCast(context.Context, *CastId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCast not implemented")
}
func (UnimplementedHubServiceServer) GetCastsByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCastsByFid not implemented")
}
func (UnimplementedHubServiceServer) GetCastsByParent(context.Context, *CastsByParentRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCastsByParent not implemented")
}
func (UnimplementedHubServiceServer) GetCastsByMention(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCastsByMention not implemented")
}
func (UnimplementedHubServiceServer) GetReaction(context.Context, *ReactionRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReaction not implemented")
}
func (UnimplementedHubServiceServer) GetReactionsByFid(context.Context, *ReactionsByFidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactionsByFid not implemented")
}
func (UnimplementedHubServiceServer) GetReactionsByCast(context.Context, *ReactionsByTargetRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactionsByCast not implemented")
}
func (UnimplementedHubServiceServer) GetReactionsByTarget(context.Context, *ReactionsByTargetRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactionsByTarget not implemented")
}
func (UnimplementedHubServiceServer) GetUserData(context.Context, *UserDataRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedHubServiceServer) GetUserDataByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataByFid not implemented")
}
func (UnimplementedHubServiceServer) GetNameRegistryEvent(context.Context, *NameRegistryEventRequest) (*NameRegistryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameRegistryEvent not implemented")
}
func (UnimplementedHubServiceServer) GetVerification(context.Context, *VerificationRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerification not implemented")
}
func (UnimplementedHubServiceServer) GetVerificationsByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerificationsByFid not implemented")
}
func (UnimplementedHubServiceServer) GetSigner(context.Context, *SignerRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigner not implemented")
}
func (UnimplementedHubServiceServer) GetSignersByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignersByFid not implemented")
}
func (UnimplementedHubServiceServer) GetIdRegistryEvent(context.Context, *IdRegistryEventRequest) (*IdRegistryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdRegistryEvent not implemented")
}
func (UnimplementedHubServiceServer) GetIdRegistryEventByAddress(context.Context, *IdRegistryEventByAddressRequest) (*IdRegistryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdRegistryEventByAddress not implemented")
}
func (UnimplementedHubServiceServer) GetFids(context.Context, *FidsRequest) (*FidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFids not implemented")
}
func (UnimplementedHubServiceServer) GetLink(context.Context, *LinkRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedHubServiceServer) GetLinksByFid(context.Context, *LinksByFidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinksByFid not implemented")
}
func (UnimplementedHubServiceServer) GetLinksByTarget(context.Context, *LinksByTargetRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinksByTarget not implemented")
}
func (UnimplementedHubServiceServer) GetAllCastMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCastMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetAllReactionMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReactionMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetAllVerificationMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVerificationMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetAllSignerMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSignerMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetAllUserDataMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserDataMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetAllLinkMessagesByFid(context.Context, *FidRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLinkMessagesByFid not implemented")
}
func (UnimplementedHubServiceServer) GetInfo(context.Context, *HubInfoRequest) (*HubInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedHubServiceServer) GetSyncStatus(context.Context, *SyncStatusRequest) (*SyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedHubServiceServer) GetAllSyncIdsByPrefix(context.Context, *TrieNodePrefix) (*SyncIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSyncIdsByPrefix not implemented")
}
func (UnimplementedHubServiceServer) GetAllMessagesBySyncIds(context.Context, *SyncIds) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessagesBySyncIds not implemented")
}
func (UnimplementedHubServiceServer) GetSyncMetadataByPrefix(context.Context, *TrieNodePrefix) (*TrieNodeMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncMetadataByPrefix not implemented")
}
func (UnimplementedHubServiceServer) GetSyncSnapshotByPrefix(context.Context, *TrieNodePrefix) (*TrieNodeSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncSnapshotByPrefix not implemented")
}

// UnsafeHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServiceServer will
// result in compilation errors.
type UnsafeHubServiceServer interface {
	mustEmbedUnimplementedHubServiceServer()
}

func RegisterHubServiceServer(s grpc.ServiceRegistrar, srv HubServiceServer) {
	s.RegisterService(&HubService_ServiceDesc, srv)
}

func _HubService_SubmitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).SubmitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_SubmitMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).SubmitMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServiceServer).Subscribe(m, &hubServiceSubscribeServer{stream})
}

type HubService_SubscribeServer interface {
	Send(*HubEvent) error
	grpc.ServerStream
}

type hubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *hubServiceSubscribeServer) Send(m *HubEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _HubService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetCast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetCast(ctx, req.(*CastId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetCastsByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetCastsByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetCastsByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetCastsByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetCastsByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastsByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetCastsByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetCastsByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetCastsByParent(ctx, req.(*CastsByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetCastsByMention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetCastsByMention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetCastsByMention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetCastsByMention(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetReaction(ctx, req.(*ReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetReactionsByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsByFidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetReactionsByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetReactionsByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetReactionsByFid(ctx, req.(*ReactionsByFidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetReactionsByCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsByTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetReactionsByCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetReactionsByCast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetReactionsByCast(ctx, req.(*ReactionsByTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetReactionsByTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsByTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetReactionsByTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetReactionsByTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetReactionsByTarget(ctx, req.(*ReactionsByTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetUserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetUserDataByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetUserDataByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetUserDataByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetUserDataByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetNameRegistryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRegistryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetNameRegistryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetNameRegistryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetNameRegistryEvent(ctx, req.(*NameRegistryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetVerification(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetVerificationsByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetVerificationsByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetVerificationsByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetVerificationsByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetSigner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSigner(ctx, req.(*SignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSignersByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSignersByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetSignersByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSignersByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetIdRegistryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRegistryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetIdRegistryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetIdRegistryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetIdRegistryEvent(ctx, req.(*IdRegistryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetIdRegistryEventByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRegistryEventByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetIdRegistryEventByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetIdRegistryEventByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetIdRegistryEventByAddress(ctx, req.(*IdRegistryEventByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetFids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetFids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetFids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetFids(ctx, req.(*FidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetLinksByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksByFidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetLinksByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetLinksByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetLinksByFid(ctx, req.(*LinksByFidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetLinksByTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinksByTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetLinksByTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetLinksByTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetLinksByTarget(ctx, req.(*LinksByTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllCastMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllCastMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllCastMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllCastMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllReactionMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllReactionMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllReactionMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllReactionMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllVerificationMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllVerificationMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllVerificationMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllVerificationMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllSignerMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllSignerMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllSignerMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllSignerMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllUserDataMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllUserDataMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllUserDataMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllUserDataMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllLinkMessagesByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllLinkMessagesByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllLinkMessagesByFid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllLinkMessagesByFid(ctx, req.(*FidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetInfo(ctx, req.(*HubInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSyncStatus(ctx, req.(*SyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllSyncIdsByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieNodePrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllSyncIdsByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllSyncIdsByPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllSyncIdsByPrefix(ctx, req.(*TrieNodePrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetAllMessagesBySyncIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetAllMessagesBySyncIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetAllMessagesBySyncIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetAllMessagesBySyncIds(ctx, req.(*SyncIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSyncMetadataByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieNodePrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSyncMetadataByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetSyncMetadataByPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSyncMetadataByPrefix(ctx, req.(*TrieNodePrefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_GetSyncSnapshotByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrieNodePrefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).GetSyncSnapshotByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HubService_GetSyncSnapshotByPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).GetSyncSnapshotByPrefix(ctx, req.(*TrieNodePrefix))
	}
	return interceptor(ctx, in, info, handler)
}

// HubService_ServiceDesc is the grpc.ServiceDesc for HubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hubble.v1.HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMessage",
			Handler:    _HubService_SubmitMessage_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _HubService_GetEvent_Handler,
		},
		{
			MethodName: "GetCast",
			Handler:    _HubService_GetCast_Handler,
		},
		{
			MethodName: "GetCastsByFid",
			Handler:    _HubService_GetCastsByFid_Handler,
		},
		{
			MethodName: "GetCastsByParent",
			Handler:    _HubService_GetCastsByParent_Handler,
		},
		{
			MethodName: "GetCastsByMention",
			Handler:    _HubService_GetCastsByMention_Handler,
		},
		{
			MethodName: "GetReaction",
			Handler:    _HubService_GetReaction_Handler,
		},
		{
			MethodName: "GetReactionsByFid",
			Handler:    _HubService_GetReactionsByFid_Handler,
		},
		{
			MethodName: "GetReactionsByCast",
			Handler:    _HubService_GetReactionsByCast_Handler,
		},
		{
			MethodName: "GetReactionsByTarget",
			Handler:    _HubService_GetReactionsByTarget_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _HubService_GetUserData_Handler,
		},
		{
			MethodName: "GetUserDataByFid",
			Handler:    _HubService_GetUserDataByFid_Handler,
		},
		{
			MethodName: "GetNameRegistryEvent",
			Handler:    _HubService_GetNameRegistryEvent_Handler,
		},
		{
			MethodName: "GetVerification",
			Handler:    _HubService_GetVerification_Handler,
		},
		{
			MethodName: "GetVerificationsByFid",
			Handler:    _HubService_GetVerificationsByFid_Handler,
		},
		{
			MethodName: "GetSigner",
			Handler:    _HubService_GetSigner_Handler,
		},
		{
			MethodName: "GetSignersByFid",
			Handler:    _HubService_GetSignersByFid_Handler,
		},
		{
			MethodName: "GetIdRegistryEvent",
			Handler:    _HubService_GetIdRegistryEvent_Handler,
		},
		{
			MethodName: "GetIdRegistryEventByAddress",
			Handler:    _HubService_GetIdRegistryEventByAddress_Handler,
		},
		{
			MethodName: "GetFids",
			Handler:    _HubService_GetFids_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _HubService_GetLink_Handler,
		},
		{
			MethodName: "GetLinksByFid",
			Handler:    _HubService_GetLinksByFid_Handler,
		},
		{
			MethodName: "GetLinksByTarget",
			Handler:    _HubService_GetLinksByTarget_Handler,
		},
		{
			MethodName: "GetAllCastMessagesByFid",
			Handler:    _HubService_GetAllCastMessagesByFid_Handler,
		},
		{
			MethodName: "GetAllReactionMessagesByFid",
			Handler:    _HubService_GetAllReactionMessagesByFid_Handler,
		},
		{
			MethodName: "GetAllVerificationMessagesByFid",
			Handler:    _HubService_GetAllVerificationMessagesByFid_Handler,
		},
		{
			MethodName: "GetAllSignerMessagesByFid",
			Handler:    _HubService_GetAllSignerMessagesByFid_Handler,
		},
		{
			MethodName: "GetAllUserDataMessagesByFid",
			Handler:    _HubService_GetAllUserDataMessagesByFid_Handler,
		},
		{
			MethodName: "GetAllLinkMessagesByFid",
			Handler:    _HubService_GetAllLinkMessagesByFid_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _HubService_GetInfo_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _HubService_GetSyncStatus_Handler,
		},
		{
			MethodName: "GetAllSyncIdsByPrefix",
			Handler:    _HubService_GetAllSyncIdsByPrefix_Handler,
		},
		{
			MethodName: "GetAllMessagesBySyncIds",
			Handler:    _HubService_GetAllMessagesBySyncIds_Handler,
		},
		{
			MethodName: "GetSyncMetadataByPrefix",
			Handler:    _HubService_GetSyncMetadataByPrefix_Handler,
		},
		{
			MethodName: "GetSyncSnapshotByPrefix",
			Handler:    _HubService_GetSyncSnapshotByPrefix_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _HubService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hubble/v1/rpc.proto",
}

const (
	AdminService_RebuildSyncTrie_FullMethodName         = "/hubble.v1.AdminService/RebuildSyncTrie"
	AdminService_DeleteAllMessagesFromDb_FullMethodName = "/hubble.v1.AdminService/DeleteAllMessagesFromDb"
	AdminService_SubmitIdRegistryEvent_FullMethodName   = "/hubble.v1.AdminService/SubmitIdRegistryEvent"
	AdminService_SubmitNameRegistryEvent_FullMethodName = "/hubble.v1.AdminService/SubmitNameRegistryEvent"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	RebuildSyncTrie(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	DeleteAllMessagesFromDb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SubmitIdRegistryEvent(ctx context.Context, in *IdRegistryEvent, opts ...grpc.CallOption) (*IdRegistryEvent, error)
	SubmitNameRegistryEvent(ctx context.Context, in *NameRegistryEvent, opts ...grpc.CallOption) (*NameRegistryEvent, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) RebuildSyncTrie(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminService_RebuildSyncTrie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteAllMessagesFromDb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminService_DeleteAllMessagesFromDb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SubmitIdRegistryEvent(ctx context.Context, in *IdRegistryEvent, opts ...grpc.CallOption) (*IdRegistryEvent, error) {
	out := new(IdRegistryEvent)
	err := c.cc.Invoke(ctx, AdminService_SubmitIdRegistryEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SubmitNameRegistryEvent(ctx context.Context, in *NameRegistryEvent, opts ...grpc.CallOption) (*NameRegistryEvent, error) {
	out := new(NameRegistryEvent)
	err := c.cc.Invoke(ctx, AdminService_SubmitNameRegistryEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	RebuildSyncTrie(context.Context, *Empty) (*Empty, error)
	DeleteAllMessagesFromDb(context.Context, *Empty) (*Empty, error)
	SubmitIdRegistryEvent(context.Context, *IdRegistryEvent) (*IdRegistryEvent, error)
	SubmitNameRegistryEvent(context.Context, *NameRegistryEvent) (*NameRegistryEvent, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) RebuildSyncTrie(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildSyncTrie not implemented")
}
func (UnimplementedAdminServiceServer) DeleteAllMessagesFromDb(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMessagesFromDb not implemented")
}
func (UnimplementedAdminServiceServer) SubmitIdRegistryEvent(context.Context, *IdRegistryEvent) (*IdRegistryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIdRegistryEvent not implemented")
}
func (UnimplementedAdminServiceServer) SubmitNameRegistryEvent(context.Context, *NameRegistryEvent) (*NameRegistryEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNameRegistryEvent not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_RebuildSyncTrie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RebuildSyncTrie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RebuildSyncTrie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RebuildSyncTrie(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteAllMessagesFromDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteAllMessagesFromDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteAllMessagesFromDb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteAllMessagesFromDb(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SubmitIdRegistryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRegistryEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SubmitIdRegistryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SubmitIdRegistryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SubmitIdRegistryEvent(ctx, req.(*IdRegistryEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SubmitNameRegistryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRegistryEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SubmitNameRegistryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SubmitNameRegistryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SubmitNameRegistryEvent(ctx, req.(*NameRegistryEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hubble.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RebuildSyncTrie",
			Handler:    _AdminService_RebuildSyncTrie_Handler,
		},
		{
			MethodName: "DeleteAllMessagesFromDb",
			Handler:    _AdminService_DeleteAllMessagesFromDb_Handler,
		},
		{
			MethodName: "SubmitIdRegistryEvent",
			Handler:    _AdminService_SubmitIdRegistryEvent_Handler,
		},
		{
			MethodName: "SubmitNameRegistryEvent",
			Handler:    _AdminService_SubmitNameRegistryEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hubble/v1/rpc.proto",
}
